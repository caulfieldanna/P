
<!DOCTYPE html>

<head>
<title>
PHP HW-2
</title>
<meta charset="utf-8"/> 
<link rel="stylesheet" type="text/css" href="hw2.css" />
<link href="https://fonts.googleapis.com/css?family=Ledger" rel="stylesheet"> 
</head>

<body>
    
<div class="task_1" id="task">
	<?php
	//Задание 1: Создать массив из дней недели. С помощью цикла foreach вывести все дни недели, а текущий день выведите жирным. Текущий день можно получить с помощью функции date Названия дней выводить по-русски 
		echo '<h3>Массив из дней недели:</h3>';

			$arr = ['<p>Понедельник</p>', 
			'<p>Вторник</p>', 
			'<p>Среда</p>', 
			'<p>Четверг</p>', 
			'<p>Пятница</p>', 
			'<p>Суббота</p>', 
			'<p>Воскресенье</p>'];

			$today = (int)date("N");

			// for ($i=1; $i <= 7 ; $i++) { 
			//  	if ($today == $i+1) {
			//  		echo "<i>" . $arr[$i] . "</i><br>";
			//  	} else {

			//  	}
			//  } 

			foreach ($arr as $key => $value) {
				if ($today == ($key + 1)) {
					echo '<b>'.$value.'</b>';
				} else {
					echo $value.'';
				}
			}
		echo "<br>";
	?>
</div>

<div class="task_2">
	<?php
		// Задание 2: Доделать задачу про счастливые билетики - вывести процент от общего числа билетов
		// ЗАДАЧА
		// вывести все счастливые билеты 000 = 000

		echo '<h3>Счастливые билеты:</h3>';
		$lucky = [];
		$i = 0;
		while ($i < 999999) {
			$ticket = str_pad($i, 6, '0', STR_PAD_LEFT);
			
			$first_half = substr($ticket, 0, 3); // 000 

			$second_half = substr($ticket, 3); // 003
			
			$first_sum = $first_half[0] + $first_half[1] + $first_half[2];
			$second_sum = $second_half[0] + $second_half[1] + $second_half[2];

			if ($first_sum == $second_sum) {
				$lucky[] = $i;
			}
			$i++;
		}
		echo "Всего счасливых билетов " . count($lucky) . "<br>";
		echo "Процент счасливых билетов " . count($lucky) * 100 / 999999 . "<br>";

		echo "<br>";
	?>
</div>


<div class="task_3" id="task">
	<?php
		// Задание 3: Создать переменную, присвоить ей значение - год. Используя тернарный оператор определить, високосный год или нет 
		echo '<h3>Не високосный год:</h3>';

		$year = 2017;

		if(($year%4==0)||($year%100!=0)&&($year%400==0)){
		$result = "$year - Високосный год";
		}else $result = "<p> $year - Не високосный год </p>";

		echo $result;
		
	?>
</div>

<div class="task_4" id="task">
	<?php
		// Задание 4: Вывести все положительные числа, меньше 40, у которых есть хотя бы одна цифра 3 и которые не делятся на 5.
		echo "<br>";
		echo '<h3>Положительные числа:</h3>';

		$i = 0;
		for ($i = 0; $i < 40; $i++) {
		  if (strpos((string)$i, '3') !== false) {
		    echo "<p> $i </p>";
		  }
		}
		echo "<br>";
	?>
</div>

<div class="task_5">
	<?php
		// Задание 5: Нарисовать ромб из символов * . Высота произвольная
			// for ($i = 1; $i <= 9; $i++) {
			// 	echo str_repeat('x' , $i).'<br>';
			// }

			// for ($j = 9; $j >= 1; $j--) {
			// 	echo str_repeat('o' , $j).'<br>';
			// }
		echo "<br>";
		echo '<h3>Ромб из: звездочек</h3>';
		$p = 14;
		$s = 1;
		$pr = $p/2 + 1;
		for($i = 1; $i < $p; $i++)
		{
		echo str_repeat('_', $pr) . str_repeat('*', $s). '<br/>';
		if((int)$p/2 > $i)
		{
		$s = $s+2;
		$pr--;
		}else{
		$s = $s-2;
		$pr++;
		}
		}
		echo "<br>";
	?>
</div>


<div class="task_6">
	<?php
		// Задание 6: Вывести таблицу умножения чисел до 10 с помощью циклов for
		echo '<h3>Таблица умножения:</h3>';
		echo "<table><tr>";

		for ($i = 1; $i < 11; $i++) { 
			for ($j = 1; $j < 11; $j++)
				echo "<td>".($i*$j)."</td>";
			if ($i != 11) echo "</tr><tr>";
		};
		echo "</tr></table>";
		echo "<br>";
	?>
</div>


<div class="task_7">
	<?php
		// Задание 7**: Отсортировать массив по 'price' $arr = [ '1'=> [ 'price' => 10, 'count' => 2 ], '2'=> [ 'price' => 5, 'count' => 5 ], '3'=> [ 'price' => 8, 'count' => 5 ], '4'=> [ 'price' => 12, 'count' => 4 ], '5'=> [ 'price' => 8, 'count' => 4 ], ];
		echo '<h3>Не уверена, что правильно поняла задание про сортировку:(</h3>';
		$arr = [ '1'=> [ 'price' => 10, 'count' => 2 ], 
				 '2'=> [ 'price' => 5, 'count' => 5 ], 
				 '3'=> [ 'price' => 8, 'count' => 5 ], 
				 '4'=> [ 'price' => 12, 'count' => 4 ], 
				 '5'=> [ 'price' => 8, 'count' => 4 ], 
			];
		echo "Отсортированный массив по price: ";
		echo "<br>";
		$arr = array(10, 5, 8, 12, 8);
		rsort($arr);
		foreach ($arr as $arr)
			echo  "$arr <br>";
	?>
</div>


<div class="task_8">
	<?php
		//Функции для работы с массивами
		echo '<h3>Функции для работы с массивами:</h3>';
		$about_array = "
		
		<p>	<b>array_change_key_case</b> — Меняет регистр всех ключей в массиве</p>
		
		<p><b>array_chunk</b> — Разбивает массив на части</p>
		
		<p><b>array_column</b> — Возвращает массив из значений одного столбца входного массива</p>
		
		<p><b>array_combine</b> — Создает новый массив, используя один массив в качестве ключей, а другой в качестве соответствующих значений</p>
		
		<p><b>array_count_values</b> — Подсчитывает количество всех значений массива</p>
		
		<p><b>array_diff_assoc</b> — Вычисляет расхождение массивов с дополнительной проверкой индекса</p>
		
		<p><b>array_diff_key</b> — Вычисляет расхождение массивов, сравнивая ключи</p>
		
		<p><b>array_diff_uassoc</b> — Вычисляет расхождение массивов с дополнительной проверкой индекса, осуществляемой при помощи callback-функции</p>
		
		<p><b>array_diff_ukey</b> — Вычисляет расхождение массивов, используя callback-функцию для сравнения ключей</p></p>
		
		<p><b>array_diff</b> — Вычислить расхождение массивов</p>
		
		<p><b>array_fill_keys</b> — Создает массив и заполняет его значениями, с определенными ключами</p>
		
		<p><b>array_fill</b> — Заполняет массив значениями</p>
		
		<p><b>array_filter</b> — Фильтрует элементы массива с помощью callback-функции</p>
		
		<p><b>array_flip</b> — Меняет местами ключи с их значениями в массиве</p>
		
		<p><b>array_intersect_assoc</b> — Вычисляет схождение массивов с дополнительной проверкой индекса</p>
		
		<p><b>array_intersect_key</b> — Вычислить пересечение массивов, сравнивая ключи</p>
		
		<p><b>array_intersect_uassoc</b> — Вычисляет схождение массивов с дополнительной проверкой индекса, осуществляемой при помощи callback-функции</p>
		
		<p><b>array_intersect_ukey</b> — Вычисляет схождение массивов, используя callback-функцию для сравнения ключей</p>
		
		<p><b>array_intersect</b> — Вычисляет схождение массивов</p>
		
		<p><b>array_key_exists</b> — Проверяет, присутствует ли в массиве указанный ключ или индекс</p>
		
		<p><b>array_keys</b> — Возвращает все или некоторое подмножество ключей массива</p>
		
		<p><b>array_map</b> — Применяет callback-функцию ко всем элементам указанных массивов</p>
		
		<p><b>array_merge_recursive</b> — Рекурсивное слияние двух или более массивов</p>
		
		<p><b>array_merge</b> — Сливает один или большее количество массивов</p>
		
		<p><b>array_multisort</b> — Сортирует несколько массивов или многомерные массивы</p>
		
		<p><b>array_pad</b> — Дополнить размер массива определенным значением до заданной величины</p>
		
		<p><b>array_pop</b> — Извлекает последний элемент массива</p>
		
		<p><b>array_product</b> — Вычислить произведение значений массива</p>
		
		<p><b>array_push</b> — Добавляет один или несколько элементов в конец массива</p>
		
		<p><b>array_rand</b> — Выбирает одно или несколько случайных значений из массива</p>
		
		<p><b>array_reduce</b> — Итеративно уменьшает массив к единственному значению, используя callback-функцию</p>
		
		<p><b>array_replace_recursive</b> — Рекурсивно заменяет элементы первого массива элементами переданных массивов</p>
		
		<p><b>array_replace</b> — Замена элементов массива элементами других переданных массивов</p>
		
		<p><b>array_reverse</b> — Возвращает массив с элементами в обратном порядке</p>
		
		<p><b>array_search</b> — Осуществляет поиск данного значения в массиве и возвращает ключ первого найденного элемента в случае удачи</p>
		
		<p><b>array_shift</b> — Извлекает первый элемент массива</p>
		
		<p><b>array_slice</b> — Выбирает срез массива</p>
		
		<p><b>array_splice</b> — Удаляет часть массива и заменяет её чем-нибудь ещё</p>
		
		<p><b>array_sum</b> — Вычисляет сумму значений массива</p>
		
		<p><b>array_udiff_assoc</b> — Вычисляет расхождение в массивах с дополнительной проверкой индексов, используя для сравнения значений callback-функцию</p>
		
		<p><b>array_udiff_uassoc</b> — Вычисляет расхождение в массивах с дополнительной проверкой индексов, используя для сравнения значений и индексов callback-функцию</p>
		
		<p><b>array_udiff</b> — Вычисляет расхождение массивов, используя для сравнения callback-функцию</p>
		
		<p><b>array_uintersect_assoc</b> — Вычисляет пересечение массивов с дополнительной проверкой индексов, используя для сравнения значений callback-функцию</p>
		
		<p><b>array_uintersect_uassoc</b> — Вычисляет пересечение массивов с дополнительной проверкой индекса, используя для сравнения индексов и значений индивидуальные callback-функции</p>
		
		<p><b>array_uintersect</b> — Вычисляет пересечение массивов, используя для сравнения значений callback-функцию</p>
		
		<p><b>array_unique</b> — Убирает повторяющиеся значения из массива</p>
		
		<p><b>array_unshift</b> — Добавляет один или несколько элементов в начало массива</p>
		
		<p><b>array_values</b> — Выбирает все значения массива</p>
		
		<p><b>array_walk_recursive</b> — Рекурсивно применяет пользовательскую функцию к каждому элементу массива</p>
		
		<p><b>array_walk</b> — Применяет заданную пользователем функцию к каждому элементу массива</p>
		
		<p><b>array</b> — Создает массив</p>
		
		<p><b>arsort</b> — Сортирует массив в обратном порядке, сохраняя ключи</p>
		
		<p><b>asort</b> — Сортирует массив, сохраняя ключи</p>
		
		<p><b>compact</b> — Создает массив, содержащий названия переменных и их значения</p>
		
		<p><b>count</b> — Подсчитывает количество элементов массива или что-то в объекте</p>
		
		<p><b>current</b> — Возвращает текущий элемент массива</p>
		
		<p><b>each</b> — Возвращает текущую пару ключ/значение из массива и смещает его </p>указатель</p>
		
		<p><b>end</b> — Устанавливает внутренний указатель массива на его последний элемент</p>
		
		<p><b>extract</b> — Импортирует переменные из массива в текущую таблицу символов</p>
		
		<p><b>in_array</b> — Проверяет, присутствует ли в массиве значение</p>
		
		<p><b>key_exists</b> — Псевдоним array_key_exists</p>
		
		<p><b>key</b> — Выбирает ключ из массива</p>
		
		<p><b>krsort</b> — Сортирует массив по ключам в обратном порядке</p>
		
		<p><b>ksort</b> — Сортирует массив по ключам</p>
		
		<p><b>list</b> — Присваивает переменным из списка значения подобно массиву</p>
		
		<p><b>natcasesort</b> — Сортирует массив, используя алгоритм natural order без учета регистра символов</p>
		
		<p><b>natsort</b> — Сортирует массив, используя алгоритм natural order</p>
		
		<p><b>next</b> — Передвигает внутренний указатель массива на одну позицию вперёд</p>
		
		<p><b>pos</b> — Псевдоним current</p>
		
		<p><b>prev</b> — Передвигает внутренний указатель массива на одну позицию назад</p>
		
		<p><b>range</b> — Создает массив, содержащий диапазон элементов</p>
		
		<p><b>reset</b> — Устанавливает внутренний указатель массива на его первый элемент</p>
		
		<p><b>rsort</b> — Сортирует массив в обратном порядке</p>
		
		<p><b>shuffle</b> — Перемешивает массив</p>
		
		<p><b>sizeof</b> — Псевдоним count</p>
		
		<p><b>sort</b> — Сортирует массив</p>
		
		<p><b>uasort</b> — Сортирует массив, используя пользовательскую функцию для сравнения элементов с сохранением ключей</p>
		
		<p><b>uksort</b> — Сортирует массив по ключам, используя пользовательскую функцию для сравнения ключей</p>
		
		<p><b>usort</b> — Сортирует массив по значениям используя пользовательскую функцию для сравнения элементов</p>
		";

		echo "$about_array";

			?>
</div>

</body>

</html>